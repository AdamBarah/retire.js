#!/usr/bin/env node

var _         = require('underscore')._,
    program   = require('commander'),
    retire    = require('../lib/retire'),
    repo      = require('../lib/repo'),
    resolve   = require('../lib/resolve'),
    fs        = require('fs'),
    emitter   = new require('events').EventEmitter,
    crypto    = require('crypto');

var events = new emitter();
var jsRepo = null;
var nodeRepo = null;

/*
 * Parse command line flags.
 */
program
  .version(retire.version)
  .option('')
  .option('-p, --package', 'limit node scan to packages where parent is mentioned in package.json (ignore node_modules)')
  .option('-n, --node',    'Run node dependency scan only')
  .option('-j, --js',      'Run scan of JavaScript files only')
  .option('-v, --verbose', 'Show identified files')
  .option('')
  .option('--jspath <path>', 'Folder to scan for javascript files')
  .parse(process.argv);

var config = _.extend({ jspath: '.' }, _.pick(program, [
  'package', 'node', 'js', 'jspath', 'verbose'
]));


var hash = {
  'sha1' : function(data) {
    shasum   = crypto.createHash('sha1');
    shasum.update(data);
    return shasum.digest('hex');
  }
};

function printResults(file, results) {
  if (retire.isVulnerable(results) || !config.verbose) return;
  var log = retire.isVulnerable(results) ? console.warn : console.log;
  if (results.length > 0) {
    log(file);
    results.forEach(function(elm) {
      log(' ' + String.fromCharCode(8627) + ' ' + elm.component + ' ' + elm.version);
    });
  }
}

function scanJsFile(file, repo) {
  var results = retire.scanFileName(file, repo);
  printResults(file, results);
  if (retire.isVulnerable(results)) {
    results = retire.scanContent(fs.readFileSync(file), repo);
    printResults(file, results);
  }  
}
function printParent(comp) {
  if ('parent' in comp) printParent(comp.parent);
  console.log(new Array(comp.level).join(' ') + (comp.parent ? String.fromCharCode(8627) + ' ' : '') + comp.component + ' ' + comp.version);
}



events.on('load-js-repo', function() {
  repo.loadrepository('https://raw.github.com/bekk/retire.js/master/repository/jsrepository.json').on('done', function(repo) {
    jsRepo = repo;
    events.emit('js-repo-loaded');
  });
});

events.on('load-node-repo', function() {
  repo.loadrepository('https://raw.github.com/bekk/retire.js/master/repository/npmrepository.json').on('done', function(repo) {
    nodeRepo = repo;
    events.emit('node-repo-loaded');
  });
});

events.on('js-repo-loaded', function() {
  events.emit(config.js ? 'scan-js' : 'load-node-repo');
});

events.on('node-repo-loaded', function() {
  events.emit(config.node ? 'scan-node' : 'scan-js');
});


events.on('scan-js', function() {
  resolve.scanJsFiles(config.jspath).on('jsfile', function(file) {
    scanJsFile(file, jsRepo);
  }).on('end', function() {
    events.emit('js-scanned');
  });
});

events.on('scan-node', function() {
  resolve.getNodeDependencies(config.package).on('done', function(dependencies) {
    for (var i in dependencies) {
      results = retire.scanNodeDependency(dependencies[i], nodeRepo);
      if (retire.isVulnerable(results)) {
        var result = results[0]; //Only single scan here
        console.warn(result.component + ' ' + result.version + ' has known vulnerabilities: ' + result.vulnerabilities.join(' '));
        if (result.parent) {
          printParent(result);
        }
      }
    }
    events.emit('node-scanned');
  });
});

events.on('js-scanned', function() {
  if (!config.js) events.emit('scan-node');
});


if (config.node) {
  events.emit('load-node-repo');
} else {
  events.emit('load-js-repo');
}

